services:
  #  --- Infrastructure & Monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    privileged: true
    expose:
      - 8080
    command:
      - '-housekeeping_interval=15s'
      - '-docker_only=true'
      - '-store_container_labels=false'
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /etc/machine-id:/etc/machine-id:ro

  node-exporter:
    image: prom/node-exporter:latest
    expose:
      - 9100
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/host
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,ro

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.96.0
    container_name: otel-collector
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317" # OTLP gRPC
      - "9090"
    depends_on: [ loki, tempo ]
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.51.1
    container_name: prometheus
    user: "nobody"
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-remote-write-receiver'
    ports:
      - "9091:9090"
    depends_on:
      otel-collector:
        condition: service_started
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.5
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"
    restart: unless-stopped

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: -config.file=/etc/tempo/tempo.yaml
    volumes:
      - ./config/tempo-config.yaml:/etc/tempo/tempo.yaml:ro
      - tempo_data:/data
    ports:
      - "4317"
      - "3200"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.1
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_LOG_LEVEL=error
    ports:
      - "3000:3000"
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started
    restart: unless-stopped


  # --- Application Services
  producer:
    build:
      context: ../
      dockerfile: services/producer/Dockerfile
      args:
        VERSION: rc
    ports:
      - "8080:8080"
    environment:
      ENVIRONMENT: development
      SERVICE_NAME: producer
      

  consumer:
    build:
      context: ../
      dockerfile: services/consumer/Dockerfile
      args:
        VERSION: rc
    ports:
      - "8901:8901"
    environment:
      ENVIRONMENT: development
      SERVICE_NAME: consumer
      


volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  tempo_data: